type: edu
custom_name: stage3
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport phonebook.MainKt;\n\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends StageTest {\n    public PhoneBookTest() {\n        super(MainKt.class);\n\
    \    }\n    \n    private long timeOnTestStart;\n    \n    @Override\n    public\
    \ List<TestCase> generate() {\n        timeOnTestStart = System.currentTimeMillis();\n\
    \        return Arrays.asList(\n                new TestCase().setTimeLimit(30\
    \ * 60 * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/Main.kt
  visible: true
  text: |-
    package phonebook

    import java.io.File
    import kotlin.math.floor
    import kotlin.math.sqrt

    class Contact {

        var number: Int
        var person: Person

        constructor(number: Int, person: Person) {
            this.number = number
            this.person = person
        }

        //override fun equals(other: Any?) = (other is Person) && this.person.name == other.name

    }

    class Person(val name: String)

    class PhoneBook {

        val MAX_SEARCH_TIME_MIN: Int = 1

        var contacts: Array<Contact>

        constructor(phoneBookFile: String) {
            this.contacts = loadContacts(phoneBookFile)
        }

        private fun loadContacts(fileName: String): Array<Contact> {
            val lines = File(fileName).readLines()
            contacts = Array<Contact>(lines.size) { Contact(0, Person("")) }
            for ((i, line) in lines.withIndex()) {
                val contact = line.split(" ")
                contacts[i] = Contact(contact.first().toInt(), Person(contact.subList(1, contact.size).joinToString(" ")))
            }
            return contacts
        }

        fun linearSearch(personsToFind: Array<Person>): Int {
            var count = 0
            for (contact in contacts) {
                if (personsToFind.any { it.name == contact.person.name }) {
                    count++
                }
            }
            return count
        }

        fun bubbleSort(personsToFind: Array<Person>): Long {
            println("Start searching (bubble sort + jump search)..")
            var startSortingTime = System.currentTimeMillis()
            var swap = true
            var stopped = false
            while (swap) {
                swap = false
                for (i in 0 until contacts.size - 1) {
                    if (contacts[i].person.name > contacts[i + 1].person.name) {
                        val temp = contacts[i]
                        contacts[i] = contacts[i + 1]
                        contacts[i + 1] = temp
                        swap = true
                    }
                }

                if (checkTimeout(startSortingTime)) {
                    stopped = true
                    break
                }
            }

            var endSortingTime = System.currentTimeMillis()
            val sortTime = endSortingTime - startSortingTime

            if (stopped) {
                println("Sorting time: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms. - STOPPED, moved to linear search", sortTime))
                var startLinear = System.currentTimeMillis()
                linearSearch(personsToFind)
                var endLinear = System.currentTimeMillis()
                var searchLinear = endLinear - startLinear
                println("Searching time: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", searchLinear))
            } else {
                println("Sorting time: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", sortTime))
                jumpSearch(personsToFind, endSortingTime)
            }

            return endSortingTime
        }

        fun checkTimeout(startTime: Long): Boolean {
            return (System.currentTimeMillis() - startTime) / 1000 * 60 > MAX_SEARCH_TIME_MIN
        }

        fun jumpSearch(persons: Array<Person>, endSortingTime: Long) {
            var startSearchingTime = System.currentTimeMillis()
            var count = 0
            val entries: Int = persons.size
            for (person in persons) {
                var step = floor(sqrt(entries.toDouble())).toInt()

                var prev = 0
                while (persons.get(Math.min(step, entries) - 1).name < person.name) {
                    prev = step
                    step += floor(Math.sqrt(entries.toDouble())).toInt()
                    if (prev >= entries) break
                }

                while (persons.get(prev).name < person.name) {
                    prev++
                    if (prev == Math.min(step, entries)) break
                }

                if (persons.get(prev).name == person.name) {
                    count++
                }

            }

            var endSearchingTime = System.currentTimeMillis()
            val searchingTime = endSearchingTime - startSearchingTime
            println("Searching time: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", searchingTime))
            println("Found $count / $entries entries. Time taken: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", endSortingTime + searchingTime))
        }

    }


    fun loadPersonsToFind(fileName: String): Array<Person> {
        val lines = File(fileName).readLines()
        val persons = Array<Person>(lines.size) { Person("") }
        for ((i, line) in lines.withIndex()) {
            persons[i] = Person(line)
        }
        return persons
    }

    fun main() {
        var phoneBook = PhoneBook("C:\\Users\\agoxhaj\\directory.txt")
        var personsToFind = loadPersonsToFind("C:\\Users\\agoxhaj\\find.txt")

        var start = System.currentTimeMillis()
        println("Start searching (linear search)...")
        val count = phoneBook.linearSearch(personsToFind)
        var end = System.currentTimeMillis()
        var entries = personsToFind.size
        println("Found $count / $entries entries. Time taken: " + String.format("%1\$tM min. %1\$tS sec. %1\$tL ms.", end - start))

        phoneBook.bubbleSort(personsToFind)
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/86/stages/478/implement
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Jan 2021 14:36:20 UTC
record: 3
